import com.modrinth.minotaur.dependencies.ModDependency
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'fabric-loom' version '1.8.2'
	id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.21'
	id 'org.jetbrains.kotlin.jvm' version '2.0.21'
	id 'com.modrinth.minotaur' version '2.+'
	id 'maven-publish'
	id 'io.ktor.plugin' version '3.0.1'
}

version = project.mod_version
group = project.maven_group

archives_base_name = "${project.archives_base_name}-${project.minecraft_version}"

def isDevelopment = project.ext.has("development")
applicationDefaultJvmArgs = ["-Dio.ktor.development=$isDevelopment"]

base {
	archivesName = project.archives_base_name
}

repositories {
}


modrinth {
	token = project.hasProperty('modrinthToken') ? project.modrinthToken : System.getenv("MODRINTH_TOKEN")
	projectId = project.id_main
	versionNumber = project.mod_version
	versionName = "IWTCMS ${project.mod_version}"
	uploadFile = remapJar
	//additionalFiles = [remapSourcesJar]
	gameVersions = Eval.me(project.release_minecraft_versions)
	versionType = project.release_type
	loaders = ["fabric"]
	syncBodyFrom = rootProject.file("README.md").text
	changelog = rootProject.file("CHANGELOG.md").text
	dependencies = [
			new ModDependency(project.id_fabric_api, "required"),
			new ModDependency(project.id_fabric_kotlin, "required"),
	]

	tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
}

dependencies {
	implementation 'io.ktor:ktor-server-core-jvm:3.0.1'
	implementation 'io.ktor:ktor-server-websockets-jvm:3.0.1'


	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    implementation "io.ktor:ktor-server-core"
    implementation "io.ktor:ktor-server-netty"
	implementation "io.ktor:ktor-network-tls-certificates"
	implementation "io.ktor:ktor-server-websockets"

	//implementation libs.logback.classic
	//testImplementation libs.ktor.server.test.host
	//testImplementation libs.kotlin.test.junit

	implementation "com.typesafe:config:${project.hocon_config_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		jvmTarget = 21
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE")
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			groupId = project.maven_group
			version = version
			//noinspection GroovyAssignabilityCheck
			from components.java
		}
	}

	repositories {
		maven {
			name = 'Lumivoid'
			url = 'https://maven.lumivoid.pp.ua/repository/lumivoid/'

			credentials {
				username = project.hasProperty("mavenUsername") ? project.mavenUsername : System.getenv("MAVEN_USERNAME")
				password = project.hasProperty("mavenPassword") ? project.mavenPassword : System.getenv("MAVEN_PASSWORD")
			}
		}
	}
}